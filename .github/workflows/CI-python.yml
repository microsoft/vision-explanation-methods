name: CI Python

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron:  '30 5 * * *'

jobs:
  ci-python:
    strategy:
      matrix:
        packageDirectory: ["vision_explanation_methods"]
        # disabling macos-latest for now as tests are failing
        operatingSystem: [ubuntu-latest, windows-latest]
        # skip python 3.9 as model seems to fail to detect in tests
        pythonVersion: ['3.7', '3.8']

    runs-on: ${{ matrix.operatingSystem }}

    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ matrix.pythonVersion }}
    - if: ${{ matrix.operatingSystem == 'windows-latest' && matrix.pythonVersion != '3.7' }}
      name: Install pytorch on windows for python 3.8 and above
      shell: bash -l {0}
      run: |
        conda install --yes --quiet pytorch::pytorch pytorch::torchvision pytorch::captum pytorch::cpuonly "libtiff<4.5.0" -c pytorch -c conda-forge
    - if: ${{ matrix.operatingSystem != 'windows-latest' && matrix.pythonVersion == '3.7' }}
      name: Install pytorch on non-windows for python 3.7
      shell: bash -l {0}
      run: |
        conda install --yes --quiet "pytorch==1.13.1" torchvision captum cpuonly -c pytorch
    - if: ${{ matrix.operatingSystem == 'windows-latest' && matrix.pythonVersion == '3.7' }}
      name: Install pytorch on windows for python 3.7
      shell: bash -l {0}
      run: |
        conda install --yes --quiet "pytorch::pytorch==1.13.1" pytorch::torchvision pytorch::captum pytorch::cpuonly -c pytorch -c conda-forge
    - if: ${{ matrix.operatingSystem != 'windows-latest' && matrix.pythonVersion != '3.7' }}
      name: Install pytorch on non-windows for python 3.8 and above
      shell: bash -l {0}
      run: |
        conda install --yes --quiet pytorch::pytorch pytorch::torchvision pytorch::captum pytorch::cpuonly -c pytorch -c conda-forge
    - name: Install package
      shell: bash -l {0}
      run: |
        pip install -e ./python
    - name: Install test dependencies
      shell: bash -l {0}
      run: |
        pip install -r requirements-test.txt
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pytest ./tests -s -v --durations=10 --cov='vision_explanation_methods' --cov-report=xml --cov-report=html
    - name: Upload code coverage results
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.packageDirectory }}-code-coverage-results
        path: htmlcov
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - if: ${{ (matrix.operatingSystem == 'windows-latest') && (matrix.pythonVersion == '3.8') }}
      name: Upload to codecov
      id: codecovupload1
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: .
        env_vars: OS,PYTHON
        fail_ci_if_error: false
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true
    - if: ${{ (steps.codecovupload1.outcome == 'failure') && (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
      name: Retry upload to codecov
      id: codecovupload2
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: .
        env_vars: OS,PYTHON
        fail_ci_if_error: false
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true
    - name: Set codecov status
      if: ${{ (matrix.pythonVersion == '3.8') && (matrix.operatingSystem == 'windows-latest') }}
      shell: bash
      run: |
        if ${{ (steps.codecovupload1.outcome == 'success') || (steps.codecovupload2.outcome == 'success') }} ; then
          echo fine
        else
          exit 1
        fi
